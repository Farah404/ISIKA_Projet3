<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:svg="http://www.w3.org/2000/svg" lang="en">

<h:head>
	<title>SmarIter</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<link rel="stylesheet"
		href="https://fonts.googleapis.com/css?family=Raleway" />
	<link rel="stylesheet"
		href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
	<link rel="stylesheet" href="resources/lightStyleSheet.css" />
</h:head>

<h:body>
	<ui:composition template="/template/template.xhtml">
		<ui:define name="content">
			<div class="container">
				<div class="header-article animate-zoom">
					<h2>Is JavaScript problematic?</h2>
				</div>

				<div class="row-article">
					<div class="leftcolumn-article animate-left">
						<div class="card-article">
							<br />
							<p>At first, JavaScript may seem quite simple. Yet the
								language is significantly more nuanced, powerful, and complex
								than one would initially be led to believe. Many of JavaScript’s
								subtleties lead to a number of common problems that keep it from
								working—10 of which we discuss here—that are important to be
								aware of and avoid in one’s quest to become a master JavaScript
								developer.</p>
							<div class="block-blog">
								<br />
								<p>Today, JavaScript is at the core of virtually all modern
									web applications. That’s why JavaScript issues, and finding the
									mistakes that cause them, are at the forefront for web
									developers. Powerful JavaScript-based libraries and frameworks
									for single page application (SPA) development, graphics and
									animation, and server-side JavaScript platforms are nothing
									new. JavaScript has truly become ubiquitous in the world of web
									app development and is therefore an increasingly important
									skill to master. At first, JavaScript may seem quite simple.
									And indeed, to build basic JavaScript functionality into a web
									page is a fairly straightforward task for any experienced
									software developer, even if they’re new to JavaScript. Yet the
									language is significantly more nuanced, powerful, and complex
									than one would initially be led to believe. Indeed, many of
									JavaScript’s subtleties lead to a number of common problems
									that keep it from working—10 of which we discuss here—that are
									important to be aware of and avoid in one’s quest to become a
									master JavaScript developer.</p>
								<br /> <br />
								<p>As is true with any technology, the better you understand
									why and how JavaScript works and doesn’t work, the more solid
									your code will be and the more you’ll be able to effectively
									harness the true power of the language. Conversely, lack of
									proper understanding of JavaScript paradigms and concepts is
									indeed where many JavaScript problems lie. Thoroughly
									familiarizing yourself with the language’s nuances and
									subtleties is the most effective strategy for improving your
									proficiency and increasing your productivity. Avoiding many
									common JavaScript mistakes will help when your JavaScript is
									not working.</p>

								<br />
								<p>Those challenges are quite well explained in this
									valuable article about code generation from Federico Tomasetti.
									Here is also an introductory article to the principles of code
									generation.</p>
							</div>
							<div class="block-blog">
								<br />
								<p>Though it is very tempting to write your own code
									generator, as many developers love to solve complex problems
									and as it is also a way to fully master your architectural
									choices (see, for example, Kathleen Dollard’s point of view in
									this article about principles of code generation), it is also a
									risky decision. The thing is that complexity is often
									underestimated by semi-experienced developers, confident enough
									while gaining some benefits in the early stages of using their
									own approach, but not anticipating how complexity will scale up
									in a nonlinear way. You will end up spending your whole time
									developing the generator instead of your project. Except if you
									are part of a large enterprise with hundreds of developers,
									which makes it relevant to build your own code generator for
									the team, it is likely a bad idea to try to build one. You can
									address the legitimate concerns about architecture by choosing
									the appropriate code generator(s) for your environment and
									technology stack.</p>

							</div>

							<br /> <img width="100%"
								src="media/gif/coding/frontend2.gif" /> <br />
							<div class="block-blog">
								<p>The common errors that developers make while coding in
									JavaScript include mistaken thinking about how the "this"
									keyword works, incorrect assumptions about block scoping, and a
									failure to avoid memory leaks. JavaScript's evolution over time
									has left many pitfalls if old coding patterns are followed.</p>
							</div>
							<div class="block-blog">
								<p>Some might contend that the JavaScript language itself is
									problematic. Indeed, it has its shortcomings, but it's also
									ubiquitous—so it pays to understand how to navigate them if you
									(like most of today's developers) have to work with some form
									of JavaScript code.</p>
							</div>
						</div>



					</div>
					<div class="rightcolumn-article animate-right">
						<div class="card-article">
							<h2>Author</h2>
							<br /> <img width="100%"
								src="media/img/Falak-Sher-Web-Designer-and-Developer-IBT.png" />
							<br /> <br />
							<h5>Ryan is a top architect, entrepreneur, and developer. He
								boasts a proven competency in building cloud-scalable,
								extensible software and systems. He writes code that can be
								maintained and expanded over time as business systems and
								requirements adapt to market demands or pivots in core business
								direction.</h5>
						</div>

					</div>
				</div>
			</div>


		</ui:define>
	</ui:composition>
</h:body>
</html>